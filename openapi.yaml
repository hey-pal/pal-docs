openapi: 3.1.0
x-stoplight:
  id: lf8hx2c7cbahj
info:
  title: HeyPal API
  version: '1.0'
  description: The HeyPal API makes it easy to add A.I. powered semantic-search & other A.I. functionality to your product & content.
servers:
  - url: 'https://heypal.chat/api'
paths:
  /documents:
    get:
      summary: Get Documents
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    $ref: '#/components/schemas/Document'
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  '':
                    type: string
      operationId: get-documents
      description: Allows you to get documents in an app based on an optional set of filters.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: string
                  example: '"your-application-id"'
                filter:
                  type: object
                  properties:
                    metadataKey:
                      type: string
                      example: fieldValue
              required:
                - applicationId
        description: ''
    parameters: []
    post:
      summary: Create Document
      operationId: post-api-documents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
      description: Add one or more documents to your applications index.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
  '/documents/{id}':
    get:
      summary: Get Document
      tags: []
      responses: {}
      operationId: get-document-by-id
      description: Get the document
      requestBody:
        content:
          application/json:
            schema:
              type: object
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The Document ID you're interacting with.
    delete:
      summary: Delete Document
      operationId: delete-document-by-id
      responses:
        '200':
          description: OK
      description: Delete the docoument
  /ask:
    get:
      summary: Search / Ask
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  searchResults:
                    type: object
                    required:
                      - documents
                    properties:
                      documents:
                        $ref: '#/components/schemas/Document'
                  answer:
                    type: string
                required:
                  - searchResults
      operationId: get-ask
      description: 'The ask endpoint is how you can preform quick look up, or generation of an answer to a user-submitted question (prompt).'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: string
                prompt:
                  type: string
                  description: 'The question you want an answer for, or the action you want the assistant to take given the additonal context of relevant documents.'
                shouldGenerateResponse:
                  type: boolean
                  description: Defaults to `true`. Determines whether the application just generates matches of similar documents or also tries to generate a longer-form synthesized response.
                filter:
                  type: object
                  description: 'A set of metadata keys and corresponding values, to only have documents that match those criteria return.'
                '':
                  type: string
              required:
                - applicationId
                - prompt
        description: |
          `shouldGenerateResponse: false`
          Fast semantic search, just returns relevant sections and the corresponding Documents from the index of the application

          `shouldGenerateResponse: true`
          Generates a response using the model provider (defaults to OpenAI), given the additional context of documents found.
  /documents/from-url:
    post:
      summary: Create Documents by Scraping URLs
      operationId: post-documents-from-url
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: string
                  x-stoplight:
                    id: 36dvhvixceu3r
                urls:
                  type: array
                  x-stoplight:
                    id: 8v8xxy4cmi58k
                  items:
                    x-stoplight:
                      id: a9nxzt6nddug4
                    type: string
                    example: '"techmeme.com/article1"'
                contentSelector:
                  type: string
                  x-stoplight:
                    id: 0hohgbqvpvecs
                metadata:
                  type: string
                  x-stoplight:
                    id: ww4jk3ekn6xru
              required:
                - applicationId
                - urls
        description: 'Pass '
      description: This endpoint lets you pass in one or more URLs that we will then fetch. Optionally you can specify a contentSelector that is a DOM Selector we ought to use to find the relevant text from the page.
  /search:
    post:
      summary: Search
      operationId: post-search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    $ref: '#/components/schemas/SearchResults'
                    x-stoplight:
                      id: g7dhoqwwhigef
            application/xml:
              schema:
                type: object
                properties: {}
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  '':
                    type: string
                    x-stoplight:
                      id: zwvs68z5s6ca8
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: string
                  x-stoplight:
                    id: rm5w9upaj7zt4
                query:
                  type: string
                  x-stoplight:
                    id: hie2sb82op0go
  /conversations:
    post:
      summary: Create or Continue Conversation
      operationId: post-conversations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    type: string
                    x-stoplight:
                      id: 8mk8adbqp34ct
                  messages:
                    type: array
                    x-stoplight:
                      id: fxv9twjlf2893
                    items:
                      $ref: '#/components/schemas/ConversationMessage'
                      x-stoplight:
                        id: jq28l9s4e6u18
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: string
                  x-stoplight:
                    id: k09jn8mzdeo5s
                parentMessageId:
                  type:
                    - string
                    - 'null'
                  x-stoplight:
                    id: ggbwaa2f8zjqu
                conversationId:
                  type:
                    - string
                    - 'null'
                  x-stoplight:
                    id: 5qt3dwvunzl83
                isStreaming:
                  type: boolean
                  x-stoplight:
                    id: jzje08yjwc9wm
                messageContent:
                  type: string
                  x-stoplight:
                    id: oug4h0yyi0fuf
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties:
                conversationId:
                  type:
                    - string
                    - 'null'
                  x-stoplight:
                    id: xumsumvng6by6
                parentMessageId:
                  x-stoplight:
                    id: 5s7k3m2cxm343
                  type:
                    - string
                    - 'null'
                applicationId:
                  type: string
                  x-stoplight:
                    id: c374rze2fpuxe
                isStreaming:
                  type: string
                  x-stoplight:
                    id: hn3rhdszv92tp
                messageContent:
                  type: string
                  x-stoplight:
                    id: 6aca4yumen9yh
        description: 'If you''re sending in the first message of a conversation, you should send in a null conversationId and a null parentMessageId. This first call will generate a new conversation, and you will receive an id for the conversation in the response body.'
    get:
      summary: Get Conversations
      operationId: get-conversations
      responses:
        '200':
          description: OK
      description: Returns the conversations for the given application
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                applicationId:
                  type: string
                  x-stoplight:
                    id: nrt1poothj6rr
  '/conversations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Conversation by Id
      tags: []
      responses: {}
      operationId: get-conversations-id
      parameters:
        - schema:
            type: string
          in: query
          name: applicationId
          description: The application id the conversation belongs to.
components:
  schemas:
    App:
      title: App
      x-stoplight:
        id: 63y7kyes79b6j
      type: object
      properties:
        id:
          type: string
    Document:
      type: object
      x-examples:
        Example 1:
          id: 28e9ea9c-b290-47f5-9e1f-59bf785b1642
          title: Manage indexes
          url: 'https://docs.pinecone.io/docs/manage-indexes'
          content: This is the sample text
          contentType: text
          fields:
            field1: field1Value
      title: Document
      x-stoplight:
        id: 1f15bd385fdbb
      properties:
        id:
          type: string
        title:
          type: string
        url:
          type: string
        content:
          type: string
        contentType:
          type: string
        metadata:
          type: object
          description: Metadata you want to store about this object.
          properties:
            '{{metadataKey}}':
              type: string
      required:
        - content
    SearchResults:
      title: SearchResults
      x-stoplight:
        id: 8ru9mlevhbb5a
      type: object
      properties:
        documents:
          x-stoplight:
            id: a6hm8esk8vbu6
          type: array
          items:
            $ref: '#/components/schemas/SearchResultDocument'
            x-stoplight:
              id: q7awucxjehpxc
        sections:
          x-stoplight:
            id: djy5szi7gar58
          type: array
          items:
            $ref: '#/components/schemas/SearchResultSection'
            x-stoplight:
              id: 8epjxbwwli6c0
    SearchResultSection:
      title: SearchResultSection
      x-stoplight:
        id: 40kaw83usyn3x
      type: object
      properties:
        id:
          type: string
        applicationId:
          type: string
          x-stoplight:
            id: 1hf86daam0v0v
        heading:
          type: string
          x-stoplight:
            id: yocswro10mueg
        text:
          type: string
          x-stoplight:
            id: k0xka7fthms8p
        documentId:
          type: string
          x-stoplight:
            id: libpxrvo8dr98
        indexOrder:
          type: string
          x-stoplight:
            id: unc8se3x8631p
        indexId:
          type: string
          x-stoplight:
            id: nmb2ghiaab592
        indexName:
          type: string
          x-stoplight:
            id: 7ut3j1bx5d29i
        indexInfo:
          type: string
          x-stoplight:
            id: s3mpr2hvaopm3
        deletedAt:
          type: string
          x-stoplight:
            id: amaxct5n3t92s
        updatedAt:
          type: string
          x-stoplight:
            id: bbef3z6fhqekq
        createdAt:
          type: string
          x-stoplight:
            id: rc91811wlffd7
    SearchResultDocument:
      title: SearchResultDocument
      x-stoplight:
        id: tedvaboygvsz3
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          x-stoplight:
            id: szfb41o346s8j
        url:
          type: string
          x-stoplight:
            id: twz4ofljy43vm
        contentPreview:
          type: string
          x-stoplight:
            id: smvofz5kercly
      required:
        - id
        - title
        - contentPreview
    ConversationMessage:
      title: ConversationMessage
      x-stoplight:
        id: l2qqhd6oifjdu
      type: object
      properties:
        id:
          type: string
        content:
          type: string
          x-stoplight:
            id: 0325wkuxemfth
        role:
          type: string
          x-stoplight:
            id: euesva5i3tl80
          enum:
            - user
            - system
            - assistant
        type:
          type: string
          x-stoplight:
            id: bw5mg5q3el291
        parentMessageId:
          type:
            - string
            - 'null'
          x-stoplight:
            id: z00179zainrrd
        searchResultSet:
          $ref: '#/components/schemas/SearchResults'
          x-stoplight:
            id: 3wpyew8z68z1h
        createdAt:
          type: string
          x-stoplight:
            id: 05mk48gpinyjc
        updatedAt:
          type: string
          x-stoplight:
            id: sov24wo1hayg8
        deletedAt:
          type:
            - string
            - 'null'
          x-stoplight:
            id: s0o6yevj5brge
        conversationId:
          type: string
          x-stoplight:
            id: 73fbvgg6mhsid
  securitySchemes:
    x-api-key:
      name: x-api-key
      type: apiKey
      in: header
      description: You can find your API key in the Settings page of your application
security:
  - API Key: []